import { app, BrowserWindow, ipcMain, dialog, Menu } from "electron";
import * as path from "path";
import * as fs from "fs";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  Menu.setApplicationMenu(null);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

ipcMain.handle("read-config", async (event, filePath) => {
  if (fs.existsSync(filePath)) {
    return JSON.parse(fs.readFileSync(filePath, "utf-8"));
  }
  throw new Error("File not found.");
});

ipcMain.handle("check-default-path", () => {
  const defaultPath =
    "C:/Riot Games/League of Legends/Config/PersistedSettings.json";
  if (fs.existsSync(defaultPath)) {
    return JSON.parse(fs.readFileSync(defaultPath, "utf-8"));
  }
  return null;
});

ipcMain.handle("select-folder", async () => {
  const result = await dialog.showOpenDialog({
    properties: ["openDirectory"],
    title: "Select League of Legends folder",
  });

  if (!result.canceled && result.filePaths.length > 0) {
    const selectedPath = result.filePaths[0];
    const persistedSettingsPath = path.join(
      selectedPath,
      "Config",
      "PersistedSettings.json"
    );

    if (fs.existsSync(persistedSettingsPath)) {
      return {
        data: JSON.parse(fs.readFileSync(persistedSettingsPath, "utf-8")),
        path: path.join(selectedPath, "Config", "PersistedSettings.json"),
      };
    } else {
      throw new Error(
        "Config file not found make sure you choose the correct folder!"
      );
    }
  } else {
    throw new Error("Folder selection canceled.");
  }
});

ipcMain.handle("save-config", async (event, values, name) => {
  const savePath = path.join(app.getPath("userData"), "configs");
  if (!fs.existsSync(savePath)) {
    fs.mkdirSync(savePath);
  }

  const fileName = `${name || `config-${Date.now()}`}.json`; // Kullanıcı adı veya benzersiz ad
  const filePath = path.join(savePath, fileName);

  fs.writeFileSync(filePath, JSON.stringify(values, null, 2), "utf-8");
  return filePath;
});

ipcMain.handle(
  "save-readonly-config",
  async (event, configData, targetPath) => {
    try {
      const fileName = `PersistedSettings.json`;
      const savePath = path.join(path.dirname(targetPath), fileName);
      fs.chmodSync(savePath, 0o666); // Geçici olarak yazılabilir yap

      fs.writeFileSync(savePath, JSON.stringify(configData, null, 2), "utf-8");

      fs.chmodSync(savePath, 0o444);

      return { success: true, path: savePath };
    } catch (error) {
      console.error("Error saving read-only config:", error);
      return { success: false, error: error.message };
    }
  }
);

ipcMain.handle("get-saved-configs", () => {
  const savePath = path.join(app.getPath("userData"), "configs");
  if (fs.existsSync(savePath)) {
    return fs.readdirSync(savePath).map((file) => {
      const fileNameWithoutExt = path.parse(file).name;
      return {
        name: fileNameWithoutExt,
        path: path.join(savePath, file),
      };
    });
  }
  return [];
});

ipcMain.handle("delete-config", async (event, filePath) => {
  if (fs.existsSync(filePath)) {
    fs.unlinkSync(filePath);
    return true;
  }
  return false;
});

app.on("ready", createWindow);

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
